{"mappings":"A,M,0C,C,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,U,I,G,E,E,O,C,kC,I,GCEC,IAAA,EAAA,EAAA,S,E,E,QA0CD,OAAM,UAAqB,EAAA,OAAO,CAIhC,YAAY,CAAO,CAAE,CACnB,KAAK,CAAC,CACJ,OAAQ,EAAQ,MAAM,CACtB,OAAQ,EAAQ,MAAM,CACtB,QAAS,EAAQ,OAAO,CACxB,YAAa,EAAQ,WAAW,CAChC,SAAU,EAAQ,QAAQ,CAC1B,UAAW,EAAQ,SAAS,CAC5B,MAAO,EAAQ,KAAK,AACtB,GAMA,IAAI,CAAC,UAAU,CAAG,EAAQ,SAAS,AACrC,CAMA,YAAY,CAAC,CAAE,CACb,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE,AAC3B,CAOA,cAAe,CACb,OAAO,IAAI,CAAC,UAAU,AACxB,CACF,CAEA,IAAA,EAAe,EAcR,SAAS,EACd,CAAS,CACT,CAAM,CACN,CAAY,EAGZ,IAAM,EAAc,EAAE,CAEhB,EAAY,EAAE,CAEd,EAAU,EAAE,CAEZ,EAAY,EAAE,CAEd,EAAQ,EAAE,CAEhB,EAAe,AAAiB,KAAA,IAAjB,EAA6B,EAAe,EAAE,CAG7D,IAAM,EAAoB,aACpB,EAAqB,aACrB,EAA2B,mBAC3B,EAAwB,gBAIxB,EAAO,EARgB,YAQe,CACtC,EAAa,AAAA,CAAA,EAAA,EAAA,GAAY,AAAZ,EAAc,GAC3B,EAAgB,EAAW,gBAAgB,GAE3C,EAAiB,EAAW,kBAAkB,GAAG,UAAU,CAAC,MAmDlE,OAjDA,CAAS,CAAC,EAAkB,CAAC,IAAI,CAAC,SAAU,CAAC,CAAE,CAAC,EAC9C,OAAO,CAAC,CAAC,EAAyB,CAAG,CAAC,CAAC,EA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","sources":["<anon>","node_modules/ol/tilegrid/WMTS.js","examples/wmts.js","node_modules/ol/source/WMTS.js"],"sourcesContent":["import \"./buildings.88bb1910.js\";\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire73bb\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire73bb\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"238Tz\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $17e2c305e5143e39$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"createFromCapabilitiesMatrixSet\", () => $17e2c305e5143e39$export$435b228518a973ff);\n/**\n * @module ol/tilegrid/WMTS\n */ \nvar $dpRHA = parcelRequire(\"dpRHA\");\n\nvar $g5oyO = parcelRequire(\"g5oyO\");\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */ /**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */ class $17e2c305e5143e39$var$WMTSTileGrid extends (0, $g5oyO.default) {\n    /**\n   * @param {Options} options WMTS options.\n   */ constructor(options){\n        super({\n            extent: options.extent,\n            origin: options.origin,\n            origins: options.origins,\n            resolutions: options.resolutions,\n            tileSize: options.tileSize,\n            tileSizes: options.tileSizes,\n            sizes: options.sizes\n        });\n        /**\n     * @private\n     * @type {!Array<string>}\n     */ this.matrixIds_ = options.matrixIds;\n    }\n    /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */ getMatrixId(z) {\n        return this.matrixIds_[z];\n    }\n    /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */ getMatrixIds() {\n        return this.matrixIds_;\n    }\n}\nvar $17e2c305e5143e39$export$2e2bcd8739ae039 = $17e2c305e5143e39$var$WMTSTileGrid;\nfunction $17e2c305e5143e39$export$435b228518a973ff(matrixSet, extent, matrixLimits) {\n    /** @type {!Array<number>} */ const resolutions = [];\n    /** @type {!Array<string>} */ const matrixIds = [];\n    /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */ const origins = [];\n    /** @type {!Array<number|import(\"../size.js\").Size>} */ const tileSizes = [];\n    /** @type {!Array<import(\"../size.js\").Size>} */ const sizes = [];\n    matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n    const supportedCRSPropName = 'SupportedCRS';\n    const matrixIdsPropName = 'TileMatrix';\n    const identifierPropName = 'Identifier';\n    const scaleDenominatorPropName = 'ScaleDenominator';\n    const topLeftCornerPropName = 'TopLeftCorner';\n    const tileWidthPropName = 'TileWidth';\n    const tileHeightPropName = 'TileHeight';\n    const code = matrixSet[supportedCRSPropName];\n    const projection = (0, $dpRHA.get)(code);\n    const metersPerUnit = projection.getMetersPerUnit();\n    // swap origin x and y coordinates if axis orientation is lat/long\n    const switchOriginXY = projection.getAxisOrientation().startsWith('ne');\n    matrixSet[matrixIdsPropName].sort(function(a, b) {\n        return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n    });\n    matrixSet[matrixIdsPropName].forEach(function(elt) {\n        let matrixAvailable;\n        // use of matrixLimits to filter TileMatrices from GetCapabilities\n        // TileMatrixSet from unavailable matrix levels.\n        if (matrixLimits.length > 0) matrixAvailable = matrixLimits.find(function(elt_ml) {\n            if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) return true;\n            // Fallback for tileMatrix identifiers that don't get prefixed\n            // by their tileMatrixSet identifiers.\n            if (!elt[identifierPropName].includes(':')) return matrixSet[identifierPropName] + ':' + elt[identifierPropName] === elt_ml[matrixIdsPropName];\n            return false;\n        });\n        else matrixAvailable = true;\n        if (matrixAvailable) {\n            matrixIds.push(elt[identifierPropName]);\n            const resolution = elt[scaleDenominatorPropName] * 0.28e-3 / metersPerUnit;\n            const tileWidth = elt[tileWidthPropName];\n            const tileHeight = elt[tileHeightPropName];\n            if (switchOriginXY) origins.push([\n                elt[topLeftCornerPropName][1],\n                elt[topLeftCornerPropName][0]\n            ]);\n            else origins.push(elt[topLeftCornerPropName]);\n            resolutions.push(resolution);\n            tileSizes.push(tileWidth == tileHeight ? tileWidth : [\n                tileWidth,\n                tileHeight\n            ]);\n            sizes.push([\n                elt['MatrixWidth'],\n                elt['MatrixHeight']\n            ]);\n        }\n    });\n    return new $17e2c305e5143e39$var$WMTSTileGrid({\n        extent: extent,\n        origins: origins,\n        resolutions: resolutions,\n        matrixIds: matrixIds,\n        tileSizes: tileSizes,\n        sizes: sizes\n    });\n}\n\n});\n\n\nvar $cc3xD = parcelRequire(\"cc3xD\");\n\nvar $5DwXE = parcelRequire(\"5DwXE\");\n\nvar $9DiKA = parcelRequire(\"9DiKA\");\n\nvar $9pD6L = parcelRequire(\"9pD6L\");\n\nvar $4mWlF = parcelRequire(\"4mWlF\");\n\nvar $dpRHA = parcelRequire(\"dpRHA\");\n\nvar $9jDAx = parcelRequire(\"9jDAx\");\n/**\n * @module ol/source/WMTS\n */ \nvar $9pD6L = parcelRequire(\"9pD6L\");\n\nvar $dpRHA = parcelRequire(\"dpRHA\");\n\nvar $238Tz = parcelRequire(\"238Tz\");\n\nvar $cwqvp = parcelRequire(\"cwqvp\");\n\nvar $8jyNP = parcelRequire(\"8jyNP\");\n\nvar $71uyY = parcelRequire(\"71uyY\");\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */ /**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */ class $03da246cb7c9d812$var$WMTS extends (0, $71uyY.default) {\n    /**\n   * @param {Options} options WMTS options.\n   */ constructor(options){\n        // TODO: add support for TileMatrixLimits\n        const requestEncoding = options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n        // FIXME: should we create a default tileGrid?\n        // we could issue a getCapabilities xhr to retrieve missing configuration\n        const tileGrid = options.tileGrid;\n        let urls = options.urls;\n        if (urls === undefined && options.url !== undefined) urls = (0, $8jyNP.expandUrl)(options.url);\n        super({\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            interpolate: options.interpolate,\n            projection: options.projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileClass: options.tileClass,\n            tileGrid: tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            urls: urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : false,\n            transition: options.transition,\n            zDirection: options.zDirection\n        });\n        /**\n     * @private\n     * @type {string}\n     */ this.version_ = options.version !== undefined ? options.version : '1.0.0';\n        /**\n     * @private\n     * @type {string}\n     */ this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n        /**\n     * @private\n     * @type {!Object}\n     */ this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n        /**\n     * @private\n     * @type {string}\n     */ this.layer_ = options.layer;\n        /**\n     * @private\n     * @type {string}\n     */ this.matrixSet_ = options.matrixSet;\n        /**\n     * @private\n     * @type {string}\n     */ this.style_ = options.style;\n        // FIXME: should we guess this requestEncoding from options.url(s)\n        //        structure? that would mean KVP only if a template is not provided.\n        /**\n     * @private\n     * @type {RequestEncoding}\n     */ this.requestEncoding_ = requestEncoding;\n        this.setKey(this.getKeyForDimensions_());\n        if (urls && urls.length > 0) this.tileUrlFunction = (0, $cwqvp.createFromTileUrlFunctions)(urls.map(this.createFromWMTSTemplate.bind(this)));\n    }\n    /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   * @override\n   */ setUrls(urls) {\n        this.urls = urls;\n        const key = urls.join('\\n');\n        this.setTileUrlFunction((0, $cwqvp.createFromTileUrlFunctions)(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n    }\n    /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */ getDimensions() {\n        return this.dimensions_;\n    }\n    /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */ getFormat() {\n        return this.format_;\n    }\n    /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */ getLayer() {\n        return this.layer_;\n    }\n    /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */ getMatrixSet() {\n        return this.matrixSet_;\n    }\n    /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */ getRequestEncoding() {\n        return this.requestEncoding_;\n    }\n    /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */ getStyle() {\n        return this.style_;\n    }\n    /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */ getVersion() {\n        return this.version_;\n    }\n    /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */ getKeyForDimensions_() {\n        const res = this.urls ? this.urls.slice(0) : [];\n        for(const key in this.dimensions_)res.push(key + '-' + this.dimensions_[key]);\n        return res.join('/');\n    }\n    /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */ updateDimensions(dimensions) {\n        Object.assign(this.dimensions_, dimensions);\n        this.setKey(this.getKeyForDimensions_());\n    }\n    /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */ createFromWMTSTemplate(template) {\n        const requestEncoding = this.requestEncoding_;\n        // context property names are lower case to allow for a case insensitive\n        // replacement as some services use different naming conventions\n        const context = {\n            'layer': this.layer_,\n            'style': this.style_,\n            'tilematrixset': this.matrixSet_\n        };\n        if (requestEncoding == 'KVP') Object.assign(context, {\n            'Service': 'WMTS',\n            'Request': 'GetTile',\n            'Version': this.version_,\n            'Format': this.format_\n        });\n        // TODO: we may want to create our own appendParams function so that params\n        // order conforms to wmts spec guidance, and so that we can avoid to escape\n        // special template params\n        template = requestEncoding == 'KVP' ? (0, $8jyNP.appendParams)(template, context) : template.replace(/\\{(\\w+?)\\}/g, function(m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n        });\n        const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ this.tileGrid;\n        const dimensions = this.dimensions_;\n        return(/**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */ function(tileCoord, pixelRatio, projection) {\n            if (!tileCoord) return undefined;\n            const localContext = {\n                'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n                'TileCol': tileCoord[1],\n                'TileRow': tileCoord[2]\n            };\n            Object.assign(localContext, dimensions);\n            let url = template;\n            if (requestEncoding == 'KVP') url = (0, $8jyNP.appendParams)(url, localContext);\n            else url = url.replace(/\\{(\\w+?)\\}/g, function(m, p) {\n                return encodeURIComponent(localContext[p]);\n            });\n            return url;\n        });\n    }\n}\nvar $03da246cb7c9d812$export$2e2bcd8739ae039 = $03da246cb7c9d812$var$WMTS;\nfunction $03da246cb7c9d812$export$6a2b1d2e791d254c(wmtsCap, config) {\n    const layers = wmtsCap['Contents']['Layer'];\n    const l = layers?.find(function(elt) {\n        return elt['Identifier'] == config['layer'];\n    });\n    if (!l) return null;\n    const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n    let idx;\n    if (l['TileMatrixSetLink'].length > 1) {\n        if ('projection' in config) idx = l['TileMatrixSetLink'].findIndex(function(elt) {\n            const tileMatrixSet = tileMatrixSets.find(function(el) {\n                return el['Identifier'] == elt['TileMatrixSet'];\n            });\n            const supportedCRS = tileMatrixSet['SupportedCRS'];\n            const proj1 = (0, $dpRHA.get)(supportedCRS);\n            const proj2 = (0, $dpRHA.get)(config['projection']);\n            if (proj1 && proj2) return (0, $dpRHA.equivalent)(proj1, proj2);\n            return supportedCRS == config['projection'];\n        });\n        else idx = l['TileMatrixSetLink'].findIndex(function(elt) {\n            return elt['TileMatrixSet'] == config['matrixSet'];\n        });\n    } else idx = 0;\n    if (idx < 0) idx = 0;\n    const matrixSet = /** @type {string} */ l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n    const matrixLimits = /** @type {Array<Object>} */ l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n    let format = /** @type {string} */ l['Format'][0];\n    if ('format' in config) format = config['format'];\n    idx = l['Style'].findIndex(function(elt) {\n        if ('style' in config) return elt['Title'] == config['style'];\n        return elt['isDefault'];\n    });\n    if (idx < 0) idx = 0;\n    const style = /** @type {string} */ l['Style'][idx]['Identifier'];\n    const dimensions = {};\n    if ('Dimension' in l) l['Dimension'].forEach(function(elt, index, array) {\n        const key = elt['Identifier'];\n        let value = elt['Default'];\n        if (value === undefined) value = elt['Value'][0];\n        dimensions[key] = value;\n    });\n    const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n    const matrixSetObj = matrixSets.find(function(elt) {\n        return elt['Identifier'] == matrixSet;\n    });\n    let projection;\n    const code = matrixSetObj['SupportedCRS'];\n    if (code) projection = (0, $dpRHA.get)(code);\n    if ('projection' in config) {\n        const projConfig = (0, $dpRHA.get)(config['projection']);\n        if (projConfig) {\n            if (!projection || (0, $dpRHA.equivalent)(projConfig, projection)) projection = projConfig;\n        }\n    }\n    let wrapX = false;\n    const switchXY = projection.getAxisOrientation().startsWith('ne');\n    let matrix = matrixSetObj.TileMatrix[0];\n    // create default matrixLimit\n    let selectedMatrixLimit = {\n        MinTileCol: 0,\n        MinTileRow: 0,\n        // subtract one to end up at tile top left\n        MaxTileCol: matrix.MatrixWidth - 1,\n        MaxTileRow: matrix.MatrixHeight - 1\n    };\n    //in case of matrix limits, use matrix limits to calculate extent\n    if (matrixLimits) {\n        selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n        const m = matrixSetObj.TileMatrix.find((tileMatrixValue)=>tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix);\n        if (m) matrix = m;\n    }\n    const resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n    const origin = switchXY ? [\n        matrix.TopLeftCorner[1],\n        matrix.TopLeftCorner[0]\n    ] : matrix.TopLeftCorner;\n    const tileSpanX = matrix.TileWidth * resolution;\n    const tileSpanY = matrix.TileHeight * resolution;\n    let matrixSetExtent = matrixSetObj['BoundingBox'];\n    if (matrixSetExtent && switchXY) matrixSetExtent = [\n        matrixSetExtent[1],\n        matrixSetExtent[0],\n        matrixSetExtent[3],\n        matrixSetExtent[2]\n    ];\n    let extent = [\n        origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n        // add one to get proper bottom/right coordinate\n        origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n        origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n        origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow\n    ];\n    if (matrixSetExtent !== undefined && !(0, $9pD6L.containsExtent)(matrixSetExtent, extent)) {\n        const wgs84BoundingBox = l['WGS84BoundingBox'];\n        const wgs84ProjectionExtent = (0, $dpRHA.get)('EPSG:4326').getExtent();\n        extent = matrixSetExtent;\n        if (wgs84BoundingBox) wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n        else {\n            const wgs84MatrixSetExtent = (0, $dpRHA.transformExtent)(matrixSetExtent, matrixSetObj['SupportedCRS'], 'EPSG:4326');\n            // Ignore slight deviation from the correct x limits\n            wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n        }\n    }\n    const tileGrid = (0, $238Tz.createFromCapabilitiesMatrixSet)(matrixSetObj, extent, matrixLimits);\n    /** @type {!Array<string>} */ const urls = [];\n    let requestEncoding = config['requestEncoding'];\n    requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n    if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n        const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n        for(let i = 0, ii = gets.length; i < ii; ++i){\n            if (gets[i]['Constraint']) {\n                const constraint = gets[i]['Constraint'].find(function(element) {\n                    return element['name'] == 'GetEncoding';\n                });\n                const encodings = constraint['AllowedValues']['Value'];\n                if (requestEncoding === '') // requestEncoding not provided, use the first encoding from the list\n                requestEncoding = encodings[0];\n                if (requestEncoding === 'KVP') {\n                    if (encodings.includes('KVP')) urls.push(/** @type {string} */ gets[i]['href']);\n                } else break;\n            } else if (gets[i]['href']) {\n                requestEncoding = 'KVP';\n                urls.push(/** @type {string} */ gets[i]['href']);\n            }\n        }\n    }\n    if (urls.length === 0) {\n        requestEncoding = 'REST';\n        l['ResourceURL'].forEach(function(element) {\n            if (element['resourceType'] === 'tile') {\n                format = element['format'];\n                urls.push(/** @type {string} */ element['template']);\n            }\n        });\n    }\n    return {\n        urls: urls,\n        layer: config['layer'],\n        matrixSet: matrixSet,\n        format: format,\n        projection: projection,\n        requestEncoding: requestEncoding,\n        tileGrid: tileGrid,\n        style: style,\n        dimensions: dimensions,\n        wrapX: wrapX,\n        crossOrigin: config['crossOrigin']\n    };\n}\n\n\n\nvar $238Tz = parcelRequire(\"238Tz\");\n\nvar $5gNCk = parcelRequire(\"5gNCk\");\nconst $090d6c0ec3a01af8$var$projection = (0, $dpRHA.get)('EPSG:3857');\nconst $090d6c0ec3a01af8$var$projectionExtent = $090d6c0ec3a01af8$var$projection.getExtent();\nconst $090d6c0ec3a01af8$var$size = (0, $9pD6L.getWidth)($090d6c0ec3a01af8$var$projectionExtent) / 256;\nconst $090d6c0ec3a01af8$var$resolutions = new Array(14);\nconst $090d6c0ec3a01af8$var$matrixIds = new Array(14);\nfor(let z = 0; z < 14; ++z){\n    // generate resolutions and matrixIds arrays for this WMTS\n    $090d6c0ec3a01af8$var$resolutions[z] = $090d6c0ec3a01af8$var$size / Math.pow(2, z);\n    $090d6c0ec3a01af8$var$matrixIds[z] = z;\n}\nconst $090d6c0ec3a01af8$var$ol2d = new (0, $5DwXE.default)({\n    layers: [\n        new (0, $4mWlF.default)({\n            source: new (0, $9jDAx.default)(),\n            opacity: 0.7\n        }),\n        new (0, $4mWlF.default)({\n            opacity: 0.7,\n            source: new (0, $03da246cb7c9d812$export$2e2bcd8739ae039)({\n                attributions: 'Tiles \\xa9 <a href=\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/WorldTimeZones/MapServer/WMTS/\">ArcGIS</a>',\n                url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/WorldTimeZones/MapServer/WMTS/\",\n                layer: 'WorldTimeZones',\n                matrixSet: 'GoogleMapsCompatible',\n                format: 'image/png',\n                projection: $090d6c0ec3a01af8$var$projection,\n                tileGrid: new (0, $238Tz.default)({\n                    origin: (0, $9pD6L.getTopLeft)($090d6c0ec3a01af8$var$projectionExtent),\n                    resolutions: $090d6c0ec3a01af8$var$resolutions,\n                    matrixIds: $090d6c0ec3a01af8$var$matrixIds\n                }),\n                style: 'default',\n                wrapX: true\n            })\n        })\n    ],\n    target: 'mapCesium',\n    view: new (0, $9DiKA.default)({\n        center: [\n            -11158582,\n            4813697\n        ],\n        zoom: 4\n    })\n});\nconst $090d6c0ec3a01af8$var$ol3d = new (0, $cc3xD.default)({\n    map: $090d6c0ec3a01af8$var$ol2d\n});\n$090d6c0ec3a01af8$var$ol3d.getCesiumScene();\n$090d6c0ec3a01af8$var$ol3d.setEnabled(true);\ndocument.getElementById('enable').addEventListener('click', ()=>$090d6c0ec3a01af8$var$ol3d.setEnabled(!$090d6c0ec3a01af8$var$ol3d.getEnabled()));\n(0, $5gNCk.initCodeSandbox)('rawjs/wmts.js');\n\n\n//# sourceMappingURL=wmts.82c22450.js.map\n","/**\n * @module ol/tilegrid/WMTS\n */\n\nimport {get as getProjection} from '../proj.js';\nimport TileGrid from './TileGrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits,\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().startsWith('ne');\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight],\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","import OLCesium from 'olcs';\n\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport {getWidth, getTopLeft} from 'ol/extent.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport {get as getProjection} from 'ol/proj.js';\nimport OSM from 'ol/source/OSM.js';\nimport WMTS from 'ol/source/WMTS.js';\nimport WMTSTileGrid from 'ol/tilegrid/WMTS.js';\n\nconst projection = getProjection('EPSG:3857');\nconst projectionExtent = projection.getExtent();\nconst size = getWidth(projectionExtent) / 256;\nconst resolutions = new Array(14);\nconst matrixIds = new Array(14);\nfor (let z = 0; z < 14; ++z) {\n  // generate resolutions and matrixIds arrays for this WMTS\n  resolutions[z] = size / Math.pow(2, z);\n  matrixIds[z] = z;\n}\n\nconst ol2d = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n      opacity: 0.7\n    }),\n    new TileLayer({\n      opacity: 0.7,\n      source: new WMTS({\n        attributions: 'Tiles © <a href=\"https://sampleserver6.arcgisonline.com/arcgis/rest/' +\n            'services/WorldTimeZones/MapServer/WMTS/\">ArcGIS</a>',\n        url: 'https://sampleserver6.arcgisonline.com/arcgis/rest/' +\n            'services/WorldTimeZones/MapServer/WMTS/',\n        layer: 'WorldTimeZones',\n        matrixSet: 'GoogleMapsCompatible',\n        format: 'image/png',\n        projection,\n        tileGrid: new WMTSTileGrid({\n          origin: getTopLeft(projectionExtent),\n          resolutions,\n          matrixIds\n        }),\n        style: 'default',\n        wrapX: true\n      })\n    })\n  ],\n  target: 'mapCesium',\n  view: new View({\n    center: [-11158582, 4813697],\n    zoom: 4\n  })\n});\n\nconst ol3d = new OLCesium({\n  map: ol2d,\n});\nol3d.getCesiumScene();\nol3d.setEnabled(true);\n\ndocument.getElementById('enable').addEventListener('click', () => ol3d.setEnabled(!ol3d.getEnabled()));\n\n//##REMOVE## Keep this tag, split code here for code sandbox\n\nimport {initCodeSandbox} from './_code-sandbox.js';\ninitCodeSandbox('rawjs/wmts.js');\n","/**\n * @module ol/source/WMTS\n */\n\nimport {containsExtent} from '../extent.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {appendParams, expandUrl} from '../uri.js';\nimport TileImage from './TileImage.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this)),\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   * @override\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this)),\n      ),\n      key,\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return encodeURIComponent(localContext[p]);\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers?.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().startsWith('ne');\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix,\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326',\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits,\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$17e2c305e5143e39$export$2e2bcd8739ae039","$17e2c305e5143e39$export$435b228518a973ff","$dpRHA","$g5oyO","$17e2c305e5143e39$var$WMTSTileGrid","default","constructor","options","extent","origin","origins","resolutions","tileSize","tileSizes","sizes","matrixIds_","matrixIds","getMatrixId","z","getMatrixIds","matrixSet","matrixLimits","undefined","matrixIdsPropName","identifierPropName","scaleDenominatorPropName","topLeftCornerPropName","projection","metersPerUnit","getMetersPerUnit","switchOriginXY","getAxisOrientation","startsWith","sort","a","b","forEach","elt","matrixAvailable","length","find","elt_ml","includes","push","resolution","tileWidth","tileHeight","$cc3xD","$5DwXE","$9DiKA","$9pD6L","$4mWlF","$9jDAx","$238Tz","$cwqvp","$8jyNP","$71uyY","$03da246cb7c9d812$var$WMTS","requestEncoding","tileGrid","urls","url","expandUrl","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","style_","style","requestEncoding_","setKey","getKeyForDimensions_","tileUrlFunction","createFromTileUrlFunctions","map","createFromWMTSTemplate","bind","setUrls","key","join","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","res","slice","updateDimensions","assign","template","context","appendParams","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext","encodeURIComponent","$5gNCk","$090d6c0ec3a01af8$var$projection","$090d6c0ec3a01af8$var$projectionExtent","getExtent","$090d6c0ec3a01af8$var$size","getWidth","$090d6c0ec3a01af8$var$resolutions","Array","$090d6c0ec3a01af8$var$matrixIds","Math","pow","$090d6c0ec3a01af8$var$ol2d","layers","source","opacity","getTopLeft","target","view","center","zoom","$090d6c0ec3a01af8$var$ol3d","getCesiumScene","setEnabled","document","getElementById","addEventListener","getEnabled","initCodeSandbox"],"version":3,"file":"wmts.82c22450.js.map"}