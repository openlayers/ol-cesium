{"mappings":"A,M,0C,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,CCAA,IAAA,EAAA,EAAA,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SAWA,IAAM,EAAS,GAAI,CAAA,EAAA,EAAA,OAAU,AAAV,EAEb,EAAO,GAAI,CAAA,EAAA,EAAA,OAAI,AAAJ,EAAM,CACrB,OAAQ,CACN,GAAI,CAAA,EAAA,EAAA,OAAU,AAAV,EAAY,CACd,OAAA,CACF,GACD,CACD,SAAU,AAAA,CAAA,EAAA,EAAA,QAAgB,AAAhB,EAAkB,CAC1B,mBAAoB,CAClB,YAAa,CAAA,CACf,CACF,GACA,OAAQ,MACR,KAAM,GAAI,CAAA,EAAA,EAAA,OAAK,AAAL,EAAO,CACf,OAAQ,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,CAAC,OAAQ,MAAM,CAAE,YAAa,aAChD,KAAM,EACR,EACF,GACM,EAAO,GAAI,CAAA,EAAA,EAAA,OAAO,AAAP,EAAS,CACxB,IAAK,EACL,OAAQ,WACV,GACM,EAAQ,EAAK,cAAc,GAoIjC,IAlIA,MACE,YAAY,CAAI,CAAE,CAAI,CAAE,CAAK,CAAE,CAC7B,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,CAAG,EAEb,IAAI,CAAC,aAAa,CAAG,GAAI,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,CACjC,QAAS,SAAS,cAAc,CAAC,QACnC,GAEA,IAAI,CAAC,oBAAoB,CAAG,GAAI,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,CACxC,QAAS,SAAS,cAAc,CAAC,kBACnC,GACA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EACvC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAE9C,IAAI,CAAC,OAAO,CAAG,CACb,SAAU,CAAA,EACV,IAAK,CAAA,CACP,EAEA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,QAAS,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,GAErD,AADqB,IAAI,OAAO,uBAAuB,CAAC,EAAM,MAAM,EACvD,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAG,OAAO,oBAAoB,CAAC,UAAa,EAGvG,AADkB,SAAS,cAAc,CAAC,qBAChC,QAAQ,CAAG,KACnB,IAAM,EAAU,SAAS,aAAa,CAAC,uCAAuC,KAC9E,CAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAG,AAAY,QAAZ,CACrB,EAGA,AADiB,SAAS,cAAc,CAAC,qBAChC,QAAQ,CAAG,AAAC,IACnB,IAAM,EAAU,SAAS,aAAa,CAAC,uCAAuC,KAC9E,CAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAG,AAAY,YAAZ,CAC1B,CACF,CAEA,iBAAiB,CAAK,CAAE,CACtB,IAAM,EAAc,EAAM,UAAU,CAC9B,EAAO,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,EACT,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,EAAa,YAAa,cAElC,EAAU,IAAI,CAAC,UAAU,GAC/B,EAAQ,WAAW,CAAC,GACpB,IAAI,CAAC,iBAAiB,CAAC,EAAS,EAClC,CAEA,iBAAiB,CAAK,CAAE,CACtB,GAAI,AAAqB,IAArB,EAAM,QAAQ,CAAC,CAAC,EAAU,AAAqB,IAArB,EAAM,QAAQ,CAAC,CAAC,CAC5C,OAGF,IAAM,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,EAAM,QAAQ,EACjD,EAAY,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAK,GAC7C,GAAI,CAAC,EACH,OAEF,IAAM,EAAe,EAAM,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC,GAC/D,EAAS,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,EAAa,SAAS,EAAG,OAAO,IAAI,CAAC,SAAS,CAAC,EAAa,QAAQ,EAAE,CAEpG,EAAS,EAAM,KAAK,CAAC,SAAS,CAAC,EACjC,CAAA,GACF,CAAA,EAAS,EAAO,MAAM,CAAC,CAAC,EAAO,CAAA,EAGjC,IAAM,EAAoB,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,EAAQ,AAAA,CAAA,EAAA,EAAA,GAAY,AAAZ,EAAc,aAAc,aAClE,EAAO,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,GACpB,EAAU,IAAI,CAAC,UAAU,GAC/B,EAAQ,WAAW,CAAC,GACpB,IAAI,CAAC,iBAAiB,CAAC,EAAS,EAClC,CAEA,YAAa,QACX,AAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CACX,IAAI,CAAC,UAAU,GAGpB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAChB,IAAI,CAAC,oBAAoB,CAE3B,IAAI,CAAC,aAAa,AAC3B,CAEA,kBAAkB,CAAO,CAAE,CAAI,CAAE,CAC/B,IAAM,EAAU,EAAQ,UAAU,GAClC,GAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,CACzB,IAAM,EAAM,SAAS,aAAa,CAAC,MACnC,CAAA,EAAI,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAE,EAAS,IAAI,CAAC,OAAO,CAAC,GAAG,EACpE,EAAI,SAAS,CAAG,CAAC,0CAA0C,EAAE,EAAK,OAAO,CAAC,CAC1E,EAAE,GAAS,OAAO,CAAC,WACnB,EAAE,GAAS,OAAO,CAAC,CACjB,UAAa,MACb,UAAa,CAAA,EACb,KAAQ,CAAA,EACR,QAAW,CACb,GACA,EAAE,GAAS,OAAO,CAAC,OACrB,MACE,EAAQ,UAAU,CAAC,OAAO,CAAC,AAAC,IACtB,AAAa,kBAAb,EAAM,EAAE,CACV,EAAM,SAAS,CAAG,CAAC,0CAA0C,EAAE,EAAK,OAAO,CAAC,CACnE,AAAa,iBAAb,EAAM,EAAE,EACjB,CAAA,EAAM,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAE,EAAS,IAAI,CAAC,OAAO,CAAC,GAAG,CAAA,CAE1E,EAEJ,CAEA,aAAa,CAAO,CAAE,CAAG,CAAE,CACrB,EACF,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAExB,EAAQ,WAAW,CAAC,KAAA,EAExB,CAEA,YAAa,KACP,EAEF,EADE,IAAI,CAAC,OAAO,CAAC,QAAQ,CACb,SAAS,cAAc,CAAC,mBAAmB,SAAS,CAAC,CAAA,GAErD,SAAS,cAAc,CAAC,SAAS,SAAS,CAAC,CAAA,GAEvD,IAAM,EAAU,GAAI,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,CAAC,QAAA,CAAO,GAEtC,OADA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GACd,CACT,CACF,EAEmB,EAAM,EAAM,GAE/B,SAAS,cAAc,CAAC,UAAU,gBAAgB,CAAC,QAAS,IAAM,EAAK,UAAU,CAAC,CAAC,EAAK,UAAU,KAKlG,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB","sources":["<anon>","examples/overlay.js"],"sourcesContent":["import \"./buildings.88bb1910.js\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire73bb\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire73bb\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n/* global $ */ \nvar $cc3xD = parcelRequire(\"cc3xD\");\n\nvar $5DwXE = parcelRequire(\"5DwXE\");\n\nvar $9jDAx = parcelRequire(\"9jDAx\");\n\nvar $4mWlF = parcelRequire(\"4mWlF\");\n\nvar $dpRHA = parcelRequire(\"dpRHA\");\n\nvar $9DiKA = parcelRequire(\"9DiKA\");\n\nvar $f3WAG = parcelRequire(\"f3WAG\");\n\nvar $haRZ2 = parcelRequire(\"haRZ2\");\n\nvar $2o3CH = parcelRequire(\"2o3CH\");\n\nvar $5gNCk = parcelRequire(\"5gNCk\");\nconst $4be2ff30c993fc81$var$source = new (0, $9jDAx.default)();\nconst $4be2ff30c993fc81$var$ol2d = new (0, $5DwXE.default)({\n    layers: [\n        new (0, $4mWlF.default)({\n            source: $4be2ff30c993fc81$var$source\n        })\n    ],\n    controls: (0, $f3WAG.defaults)({\n        attributionOptions: {\n            collapsible: false\n        }\n    }),\n    target: 'map',\n    view: new (0, $9DiKA.default)({\n        center: (0, $dpRHA.transform)([\n            -112.2,\n            36.06\n        ], 'EPSG:4326', 'EPSG:3857'),\n        zoom: 11\n    })\n});\nconst $4be2ff30c993fc81$var$ol3d = new (0, $cc3xD.default)({\n    map: $4be2ff30c993fc81$var$ol2d,\n    target: 'mapCesium'\n});\nconst $4be2ff30c993fc81$var$scene = $4be2ff30c993fc81$var$ol3d.getCesiumScene();\nclass $4be2ff30c993fc81$var$OverlayHandler {\n    constructor(ol2d, ol3d, scene){\n        this.ol2d = ol2d;\n        this.ol3d = ol3d;\n        this.scene = scene;\n        this.staticOverlay = new (0, $haRZ2.default)({\n            element: document.getElementById('popup')\n        });\n        this.staticBootstrapPopup = new (0, $haRZ2.default)({\n            element: document.getElementById('popup-bootstrap')\n        });\n        this.ol2d.addOverlay(this.staticOverlay);\n        this.ol2d.addOverlay(this.staticBootstrapPopup);\n        this.options = {\n            boostrap: false,\n            add: true\n        };\n        this.ol2d.on('click', this.onClickHandlerOL.bind(this));\n        const eventHandler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n        eventHandler.setInputAction(this.onClickHandlerCS.bind(this), Cesium.ScreenSpaceEventType['LEFT_CLICK']);\n        const clickForm = document.getElementById('click-action-form');\n        clickForm.onchange = ()=>{\n            const checked = document.querySelector('input[name=\"click-action\"]:checked')?.value;\n            this.options.add = checked === 'add';\n        };\n        const typeForm = document.getElementById('overlay-type-form');\n        typeForm.onchange = (event)=>{\n            const checked = document.querySelector('input[name=\"overlay-type\"]:checked')?.value;\n            this.options.boostrap = checked === 'popover';\n        };\n    }\n    onClickHandlerOL(event) {\n        const coordinates = event.coordinate;\n        const hdms = (0, $2o3CH.toStringHDMS)((0, $dpRHA.transform)(coordinates, 'EPSG:3857', 'EPSG:4326'));\n        const overlay = this.getOverlay();\n        overlay.setPosition(coordinates);\n        this.setOverlayContent(overlay, hdms);\n    }\n    onClickHandlerCS(event) {\n        if (event.position.x === 0 && event.position.y === 0) return;\n        const ray = this.scene.camera.getPickRay(event.position);\n        const cartesian = this.scene.globe.pick(ray, $4be2ff30c993fc81$var$scene);\n        if (!cartesian) return;\n        const cartographic = $4be2ff30c993fc81$var$scene.globe.ellipsoid.cartesianToCartographic(cartesian);\n        let coords = [\n            Cesium.Math.toDegrees(cartographic.longitude),\n            Cesium.Math.toDegrees(cartographic.latitude)\n        ];\n        const height = $4be2ff30c993fc81$var$scene.globe.getHeight(cartographic);\n        if (height) coords = coords.concat([\n            height\n        ]);\n        const transformedCoords = (0, $dpRHA.transform)(coords, (0, $dpRHA.get)('EPSG:4326'), 'EPSG:3857');\n        const hdms = (0, $2o3CH.toStringHDMS)(coords);\n        const overlay = this.getOverlay();\n        overlay.setPosition(transformedCoords);\n        this.setOverlayContent(overlay, hdms);\n    }\n    getOverlay() {\n        if (this.options.add) return this.addOverlay();\n        if (this.options.boostrap) return this.staticBootstrapPopup;\n        return this.staticOverlay;\n    }\n    setOverlayContent(overlay, hdms) {\n        const element = overlay.getElement();\n        if (this.options.boostrap) {\n            const div = document.createElement('div');\n            div.onclick = this.onCloseClick.bind(this, overlay, this.options.add);\n            div.innerHTML = `<p>The location you clicked was:</p><code>${hdms}</code>`;\n            $(element).popover('destroy');\n            $(element).popover({\n                'placement': 'top',\n                'animation': false,\n                'html': true,\n                'content': div\n            });\n            $(element).popover('show');\n        } else element.childNodes.forEach((child)=>{\n            if (child.id === 'popup-content') child.innerHTML = `<p>The location you clicked was:</p><code>${hdms}</code>`;\n            else if (child.id === 'popup-closer') child.onclick = this.onCloseClick.bind(this, overlay, this.options.add);\n        });\n    }\n    onCloseClick(overlay, add) {\n        if (add) this.ol2d.removeOverlay(overlay);\n        else overlay.setPosition(undefined);\n    }\n    addOverlay() {\n        let element;\n        if (this.options.boostrap) element = document.getElementById('popup-bootstrap').cloneNode(true);\n        else element = document.getElementById('popup').cloneNode(true);\n        const overlay = new (0, $haRZ2.default)({\n            element: element\n        });\n        this.ol2d.addOverlay(overlay);\n        return overlay;\n    }\n}\nnew $4be2ff30c993fc81$var$OverlayHandler($4be2ff30c993fc81$var$ol2d, $4be2ff30c993fc81$var$ol3d, $4be2ff30c993fc81$var$scene);\ndocument.getElementById('enable').addEventListener('click', ()=>$4be2ff30c993fc81$var$ol3d.setEnabled(!$4be2ff30c993fc81$var$ol3d.getEnabled()));\n(0, $5gNCk.initCodeSandbox)('rawjs/overlay.js');\n\n\n//# sourceMappingURL=overlay.c24371ce.js.map\n","/* global $ */\nimport OLCesium from 'olcs';\nimport olMap from 'ol/Map.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport {transform, get as getProjection} from 'ol/proj.js';\nimport olView from 'ol/View.js';\nimport {defaults as olControlDefaults} from 'ol/control.js';\nimport olOverlay from 'ol/Overlay.js';\nimport {toStringHDMS} from 'ol/coordinate.js';\n\nconst source = new olSourceOSM();\n\nconst ol2d = new olMap({\n  layers: [\n    new olLayerTile({\n      source\n    })\n  ],\n  controls: olControlDefaults({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  target: 'map',\n  view: new olView({\n    center: transform([-112.2, 36.06], 'EPSG:4326', 'EPSG:3857'),\n    zoom: 11\n  })\n});\nconst ol3d = new OLCesium({\n  map: ol2d,\n  target: 'mapCesium'\n});\nconst scene = ol3d.getCesiumScene();\n\nclass OverlayHandler {\n  constructor(ol2d, ol3d, scene) {\n    this.ol2d = ol2d;\n    this.ol3d = ol3d;\n    this.scene = scene;\n\n    this.staticOverlay = new olOverlay({\n      element: document.getElementById('popup')\n    });\n\n    this.staticBootstrapPopup = new olOverlay({\n      element: document.getElementById('popup-bootstrap')\n    });\n    this.ol2d.addOverlay(this.staticOverlay);\n    this.ol2d.addOverlay(this.staticBootstrapPopup);\n\n    this.options = {\n      boostrap: false,\n      add: true\n    };\n\n    this.ol2d.on('click', this.onClickHandlerOL.bind(this));\n    const eventHandler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n    eventHandler.setInputAction(this.onClickHandlerCS.bind(this), Cesium.ScreenSpaceEventType['LEFT_CLICK']);\n\n    const clickForm = document.getElementById('click-action-form');\n    clickForm.onchange = () => {\n      const checked = document.querySelector('input[name=\"click-action\"]:checked')?.value;\n      this.options.add = checked === 'add';\n    };\n\n    const typeForm = document.getElementById('overlay-type-form');\n    typeForm.onchange = (event) => {\n      const checked = document.querySelector('input[name=\"overlay-type\"]:checked')?.value;\n      this.options.boostrap = checked === 'popover';\n    };\n  }\n\n  onClickHandlerOL(event) {\n    const coordinates = event.coordinate;\n    const hdms = toStringHDMS(\n        transform(coordinates, 'EPSG:3857', 'EPSG:4326')\n    );\n    const overlay = this.getOverlay();\n    overlay.setPosition(coordinates);\n    this.setOverlayContent(overlay, hdms);\n  }\n\n  onClickHandlerCS(event) {\n    if (event.position.x === 0 && event.position.y === 0) {\n      return;\n    }\n\n    const ray = this.scene.camera.getPickRay(event.position);\n    const cartesian = this.scene.globe.pick(ray, scene);\n    if (!cartesian) {\n      return;\n    }\n    const cartographic = scene.globe.ellipsoid.cartesianToCartographic(cartesian);\n    let coords = [Cesium.Math.toDegrees(cartographic.longitude), Cesium.Math.toDegrees(cartographic.latitude)];\n\n    const height = scene.globe.getHeight(cartographic);\n    if (height) {\n      coords = coords.concat([height]);\n    }\n\n    const transformedCoords = transform(coords, getProjection('EPSG:4326'), 'EPSG:3857');\n    const hdms = toStringHDMS(coords);\n    const overlay = this.getOverlay();\n    overlay.setPosition(transformedCoords);\n    this.setOverlayContent(overlay, hdms);\n  }\n\n  getOverlay() {\n    if (this.options.add) {\n      return this.addOverlay();\n    }\n\n    if (this.options.boostrap) {\n      return this.staticBootstrapPopup;\n    }\n    return this.staticOverlay;\n  }\n\n  setOverlayContent(overlay, hdms) {\n    const element = overlay.getElement();\n    if (this.options.boostrap) {\n      const div = document.createElement('div');\n      div.onclick = this.onCloseClick.bind(this, overlay, this.options.add);\n      div.innerHTML = `<p>The location you clicked was:</p><code>${hdms}</code>`;\n      $(element).popover('destroy');\n      $(element).popover({\n        'placement': 'top',\n        'animation': false,\n        'html': true,\n        'content': div\n      });\n      $(element).popover('show');\n    } else {\n      element.childNodes.forEach((child) => {\n        if (child.id === 'popup-content') {\n          child.innerHTML = `<p>The location you clicked was:</p><code>${hdms}</code>`;\n        } else if (child.id === 'popup-closer') {\n          child.onclick = this.onCloseClick.bind(this, overlay, this.options.add);\n        }\n      });\n    }\n  }\n\n  onCloseClick(overlay, add) {\n    if (add) {\n      this.ol2d.removeOverlay(overlay);\n    } else {\n      overlay.setPosition(undefined);\n    }\n  }\n\n  addOverlay() {\n    let element;\n    if (this.options.boostrap) {\n      element = document.getElementById('popup-bootstrap').cloneNode(true);\n    } else {\n      element = document.getElementById('popup').cloneNode(true);\n    }\n    const overlay = new olOverlay({element});\n    this.ol2d.addOverlay(overlay);\n    return overlay;\n  }\n}\n\nnew OverlayHandler(ol2d, ol3d, scene);\n\ndocument.getElementById('enable').addEventListener('click', () => ol3d.setEnabled(!ol3d.getEnabled()));\n\n//##REMOVE## Keep this tag, split code here for code sandbox\n\nimport {initCodeSandbox} from './_code-sandbox.js';\ninitCodeSandbox('rawjs/overlay.js');\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$cc3xD","$5DwXE","$9jDAx","$4mWlF","$dpRHA","$9DiKA","$f3WAG","$haRZ2","$2o3CH","$5gNCk","$4be2ff30c993fc81$var$source","default","$4be2ff30c993fc81$var$ol2d","layers","source","controls","defaults","attributionOptions","collapsible","target","view","center","transform","zoom","$4be2ff30c993fc81$var$ol3d","map","$4be2ff30c993fc81$var$scene","getCesiumScene","constructor","ol2d","ol3d","scene","staticOverlay","element","document","getElementById","staticBootstrapPopup","addOverlay","options","boostrap","add","on","onClickHandlerOL","bind","eventHandler","Cesium","ScreenSpaceEventHandler","canvas","setInputAction","onClickHandlerCS","ScreenSpaceEventType","clickForm","onchange","checked","querySelector","value","typeForm","event","coordinates","coordinate","hdms","toStringHDMS","overlay","getOverlay","setPosition","setOverlayContent","position","x","y","ray","camera","getPickRay","cartesian","globe","pick","cartographic","ellipsoid","cartesianToCartographic","coords","Math","toDegrees","longitude","latitude","height","getHeight","concat","transformedCoords","get","getElement","div","createElement","onclick","onCloseClick","innerHTML","$","popover","childNodes","forEach","child","removeOverlay","undefined","cloneNode","addEventListener","setEnabled","getEnabled","initCodeSandbox"],"version":3,"file":"overlay.c24371ce.js.map"}