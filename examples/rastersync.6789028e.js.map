{"mappings":"A,M,0C,C,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,I,GCOC,IAAA,EAAA,EAAA,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,QA+DD,OAAM,UAAiB,EAAA,OAAQ,CAI7B,YAAY,CAAO,CAAE,CA2BnB,GA1BA,KAAK,CAAC,CACJ,aAAc,EAAQ,YAAY,CAClC,UAAW,EAAQ,SAAS,CAC5B,YAAa,EAAQ,WAAW,CAChC,YAAa,EAAQ,WAAW,CAChC,WAAY,AAAA,CAAA,EAAA,EAAA,GAAY,AAAZ,EAAc,aAC1B,2BAA4B,EAAQ,0BAA0B,CAC9D,MAAO,UACP,iBAAkB,EAAQ,gBAAgB,CAC1C,MAAO,AAAkB,KAAA,IAAlB,EAAQ,KAAK,EAAiB,EAAQ,KAAK,CAClD,WAAY,EAAQ,UAAU,CAC9B,WAAY,EAAQ,UAAU,AAChC,GAMA,IAAI,CAAC,SAAS,CAAG,KAMjB,IAAI,CAAC,SAAS,CAAG,EAAQ,QAAQ,CAE7B,EAAQ,GAAG,CACb,GAAI,EAAQ,KAAK,CACf,AAAA,CAAA,EAAA,EAAA,KAAW,AAAX,EACE,EAAQ,GAAG,CACX,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EACrC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,OAE/B,CACL,IAAM,EAAS,IAAI,eACnB,EAAO,gBAAgB,CAAC,OAAQ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,GACzD,EAAO,gBAAgB,CAAC,QAAS,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,GAC3D,EAAO,IAAI,CAAC,MAAO,EAAQ,GAAG,EAC9B,EAAO,IAAI,EACb,MACK,GAAI,EAAQ,QAAQ,CACzB,IA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","sources":["<anon>","node_modules/ol/source/TileJSON.js","node_modules/ol/net.js","examples/rastersync.js","node_modules/ol/source/StadiaMaps.js"],"sourcesContent":["import \"./buildings.88bb1910.js\";\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire73bb\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire73bb\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6hoO8\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $492792e764651581$export$2e2bcd8739ae039);\n/**\n * @module ol/source/TileJSON\n */ // FIXME check order of async callbacks\n/**\n * See https://mapbox.com/developers/api/.\n */ \nvar $9pD6L = parcelRequire(\"9pD6L\");\n\nvar $fVWcg = parcelRequire(\"fVWcg\");\n\nvar $dpRHA = parcelRequire(\"dpRHA\");\n\nvar $7vCDj = parcelRequire(\"7vCDj\");\n\nvar $cwqvp = parcelRequire(\"cwqvp\");\n\nvar $71uyY = parcelRequire(\"71uyY\");\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */ /**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */ class $492792e764651581$var$TileJSON extends (0, $71uyY.default) {\n    /**\n   * @param {Options} options TileJSON options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            interpolate: options.interpolate,\n            projection: (0, $dpRHA.get)('EPSG:3857'),\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            state: 'loading',\n            tileLoadFunction: options.tileLoadFunction,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition,\n            zDirection: options.zDirection\n        });\n        /**\n     * @type {Config}\n     * @private\n     */ this.tileJSON_ = null;\n        /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */ this.tileSize_ = options.tileSize;\n        if (options.url) {\n            if (options.jsonp) (0, $fVWcg.jsonp)(options.url, this.handleTileJSONResponse.bind(this), this.handleTileJSONError.bind(this));\n            else {\n                const client = new XMLHttpRequest();\n                client.addEventListener('load', this.onXHRLoad_.bind(this));\n                client.addEventListener('error', this.onXHRError_.bind(this));\n                client.open('GET', options.url);\n                client.send();\n            }\n        } else if (options.tileJSON) this.handleTileJSONResponse(options.tileJSON);\n        else throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n    /**\n   * @private\n   * @param {Event} event The load event.\n   */ onXHRLoad_(event) {\n        const client = /** @type {XMLHttpRequest} */ event.target;\n        // status will be 0 for file:// urls\n        if (!client.status || client.status >= 200 && client.status < 300) {\n            let response;\n            try {\n                response = /** @type {Config} */ JSON.parse(client.responseText);\n            } catch  {\n                this.handleTileJSONError();\n                return;\n            }\n            this.handleTileJSONResponse(response);\n        } else this.handleTileJSONError();\n    }\n    /**\n   * @private\n   * @param {Event} event The error event.\n   */ onXHRError_(event) {\n        this.handleTileJSONError();\n    }\n    /**\n   * @return {Config} The tilejson object.\n   * @api\n   */ getTileJSON() {\n        return this.tileJSON_;\n    }\n    /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */ handleTileJSONResponse(tileJSON) {\n        const epsg4326Projection = (0, $dpRHA.get)('EPSG:4326');\n        const sourceProjection = this.getProjection();\n        let extent;\n        if (tileJSON['bounds'] !== undefined) {\n            const transform = (0, $dpRHA.getTransformFromProjections)(epsg4326Projection, sourceProjection);\n            extent = (0, $9pD6L.applyTransform)(tileJSON['bounds'], transform);\n        }\n        const gridExtent = (0, $7vCDj.extentFromProjection)(sourceProjection);\n        const minZoom = tileJSON['minzoom'] || 0;\n        const maxZoom = tileJSON['maxzoom'] || 22;\n        const tileGrid = (0, $7vCDj.createXYZ)({\n            extent: gridExtent,\n            maxZoom: maxZoom,\n            minZoom: minZoom,\n            tileSize: this.tileSize_\n        });\n        this.tileGrid = tileGrid;\n        this.tileUrlFunction = (0, $cwqvp.createFromTemplates)(tileJSON['tiles'], tileGrid);\n        if (tileJSON['attribution'] && !this.getAttributions()) {\n            const attributionExtent = extent !== undefined ? extent : gridExtent;\n            this.setAttributions(function(frameState) {\n                if ((0, $9pD6L.intersects)(attributionExtent, frameState.extent)) return [\n                    tileJSON['attribution']\n                ];\n                return null;\n            });\n        }\n        this.tileJSON_ = tileJSON;\n        this.setState('ready');\n    }\n    /**\n   * @protected\n   */ handleTileJSONError() {\n        this.setState('error');\n    }\n}\nvar $492792e764651581$export$2e2bcd8739ae039 = $492792e764651581$var$TileJSON;\n\n});\nparcelRegister(\"fVWcg\", function(module, exports) {\n\n$parcel$export(module.exports, \"jsonp\", () => $b9995293a67f37e1$export$3552a04808364507);\n/**\n * @module ol/net\n */ \nvar $9iPUS = parcelRequire(\"9iPUS\");\nfunction $b9995293a67f37e1$export$3552a04808364507(url, callback, errback, callbackParam) {\n    const script = document.createElement('script');\n    const key = 'olc_' + (0, $9iPUS.getUid)(callback);\n    function cleanup() {\n        delete window[key];\n        script.parentNode.removeChild(script);\n    }\n    script.async = true;\n    script.src = url + (url.includes('?') ? '&' : '?') + (callbackParam || 'callback') + '=' + key;\n    const timer = setTimeout(function() {\n        cleanup();\n        if (errback) errback();\n    }, 10000);\n    window[key] = function(data) {\n        clearTimeout(timer);\n        cleanup();\n        callback(data);\n    };\n    document.head.appendChild(script);\n}\nclass $b9995293a67f37e1$export$286baf652d0b1206 extends Error {\n    /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */ constructor(response){\n        const message = 'Unexpected response status: ' + response.status;\n        super(message);\n        /**\n     * @type {string}\n     */ this.name = 'ResponseError';\n        /**\n     * @type {XMLHttpRequest}\n     */ this.response = response;\n    }\n}\nclass $b9995293a67f37e1$export$bb8c263ad32caa8 extends Error {\n    /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */ constructor(client){\n        super('Failed to issue request');\n        /**\n     * @type {string}\n     */ this.name = 'ClientError';\n        /**\n     * @type {XMLHttpRequest}\n     */ this.client = client;\n    }\n}\nfunction $b9995293a67f37e1$export$d047a7c56db64af4(url) {\n    return new Promise(function(resolve, reject) {\n        /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */ function onLoad(event) {\n            const client = event.target;\n            // status will be 0 for file:// urls\n            if (!client.status || client.status >= 200 && client.status < 300) {\n                let data;\n                try {\n                    data = JSON.parse(client.responseText);\n                } catch (err) {\n                    const message = 'Error parsing response text as JSON: ' + err.message;\n                    reject(new Error(message));\n                    return;\n                }\n                resolve(data);\n                return;\n            }\n            reject(new $b9995293a67f37e1$export$286baf652d0b1206(client));\n        }\n        /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */ function onError(event) {\n            reject(new $b9995293a67f37e1$export$bb8c263ad32caa8(event.target));\n        }\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', onLoad);\n        client.addEventListener('error', onError);\n        client.open('GET', url);\n        client.setRequestHeader('Accept', 'application/json');\n        client.send();\n    });\n}\nfunction $b9995293a67f37e1$export$f85c16a6d62f7d63(base, url) {\n    if (url.includes('://')) return url;\n    return new URL(url, base).href;\n}\nlet $b9995293a67f37e1$var$originalXHR;\nfunction $b9995293a67f37e1$export$deeb0e1e5243b56c(xhr) {\n    if (typeof XMLHttpRequest !== 'undefined') $b9995293a67f37e1$var$originalXHR = XMLHttpRequest;\n    $parcel$global.XMLHttpRequest = xhr;\n}\nfunction $b9995293a67f37e1$export$c2af84f345593eb8() {\n    $parcel$global.XMLHttpRequest = $b9995293a67f37e1$var$originalXHR;\n}\n\n});\n\n\n\nvar $972nR = parcelRequire(\"972nR\");\n/**\n * @module ol/source/StadiaMaps\n */ \nvar $9jDAx = parcelRequire(\"9jDAx\");\n\nvar $cTF5I = parcelRequire(\"cTF5I\");\n/**\n * @type {string}\n */ const $d46497741df21850$var$STADIA_ATTRIBUTION = '&copy; <a href=\"https://www.stadiamaps.com/\" target=\"_blank\">Stadia Maps</a>';\n/**\n * @type {string}\n */ const $d46497741df21850$var$OMT_ATTRIBUTION = '&copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a>';\n/**\n * @type {string}\n */ const $d46497741df21850$var$STAMEN_ATTRIBUTION = '&copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a>';\n/**\n * @type {Object<string, {extension: string}>}\n */ const $d46497741df21850$var$LayerConfig = {\n    'stamen_terrain': {\n        extension: 'png'\n    },\n    'stamen_terrain_background': {\n        extension: 'png'\n    },\n    'stamen_terrain_labels': {\n        extension: 'png'\n    },\n    'stamen_terrain_lines': {\n        extension: 'png'\n    },\n    'stamen_toner_background': {\n        extension: 'png'\n    },\n    'stamen_toner': {\n        extension: 'png'\n    },\n    'stamen_toner_labels': {\n        extension: 'png'\n    },\n    'stamen_toner_lines': {\n        extension: 'png'\n    },\n    'stamen_toner_lite': {\n        extension: 'png'\n    },\n    'stamen_watercolor': {\n        extension: 'jpg'\n    },\n    'alidade_smooth': {\n        extension: 'png'\n    },\n    'alidade_smooth_dark': {\n        extension: 'png'\n    },\n    'alidade_satellite': {\n        extension: 'png'\n    },\n    'outdoors': {\n        extension: 'png'\n    },\n    'osm_bright': {\n        extension: 'png'\n    }\n};\n/**\n * @type {Object<string, {minZoom: number, maxZoom: number, retina: boolean}>}\n */ const $d46497741df21850$var$ProviderConfig = {\n    'stamen_terrain': {\n        minZoom: 0,\n        maxZoom: 18,\n        retina: true\n    },\n    'stamen_toner': {\n        minZoom: 0,\n        maxZoom: 20,\n        retina: true\n    },\n    'stamen_watercolor': {\n        minZoom: 1,\n        maxZoom: 18,\n        retina: false\n    }\n};\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {string} layer Layer name. Valid values: `alidade_smooth`, `alidade_smooth_dark`, `outdoors`, `stamen_terrain`, `stamen_terrain_background`, `stamen_terrain_labels`, `stamen_terrain_lines`, `stamen_toner_background`, `stamen_toner`, `stamen_toner_labels`, `stamen_toner_lines`, `stamen_toner_lite`, `stamen_watercolor`, and `osm_bright`.\n * @property {number} [minZoom] Minimum zoom.\n * @property {number} [maxZoom] Maximum zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [apiKey] Stadia Maps API key. Not required for localhost or most public web deployments. See https://docs.stadiamaps.com/authentication/ for details.\n * @property {boolean} [retina] Use retina tiles (if available; not available for Stamen Watercolor).\n */ /**\n * @classdesc\n * Layer source for the Stadia Maps tile server.\n * @api\n */ class $d46497741df21850$var$StadiaMaps extends (0, $cTF5I.default) {\n    /**\n   * @param {Options} options StadiaMaps options.\n   */ constructor(options){\n        const i = options.layer.indexOf('-');\n        const provider = i == -1 ? options.layer : options.layer.slice(0, i);\n        const providerConfig = $d46497741df21850$var$ProviderConfig[provider] || {\n            'minZoom': 0,\n            'maxZoom': 20,\n            'retina': true\n        };\n        const layerConfig = $d46497741df21850$var$LayerConfig[options.layer];\n        const query = options.apiKey ? '?api_key=' + options.apiKey : '';\n        const retina = providerConfig.retina && options.retina ? '@2x' : '';\n        const url = options.url !== undefined ? options.url : 'https://tiles.stadiamaps.com/tiles/' + options.layer + '/{z}/{x}/{y}' + retina + '.' + layerConfig.extension + query;\n        const attributions = [\n            $d46497741df21850$var$STADIA_ATTRIBUTION,\n            $d46497741df21850$var$OMT_ATTRIBUTION,\n            (0, $9jDAx.ATTRIBUTION)\n        ];\n        if (options.layer.startsWith('stamen_')) attributions.splice(1, 0, $d46497741df21850$var$STAMEN_ATTRIBUTION);\n        super({\n            attributions: attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: 'anonymous',\n            interpolate: options.interpolate,\n            maxZoom: options.maxZoom !== undefined ? options.maxZoom : providerConfig.maxZoom,\n            minZoom: options.minZoom !== undefined ? options.minZoom : providerConfig.minZoom,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileLoadFunction: options.tileLoadFunction,\n            transition: options.transition,\n            url: url,\n            tilePixelRatio: retina ? 2 : 1,\n            wrapX: options.wrapX,\n            zDirection: options.zDirection\n        });\n    }\n}\nvar $d46497741df21850$export$2e2bcd8739ae039 = $d46497741df21850$var$StadiaMaps;\n\n\n\nvar $cc3xD = parcelRequire(\"cc3xD\");\n\nvar $YSU3I = parcelRequire(\"YSU3I\");\n\nvar $5DwXE = parcelRequire(\"5DwXE\");\n\nvar $6hoO8 = parcelRequire(\"6hoO8\");\n\nvar $9jDAx = parcelRequire(\"9jDAx\");\n\nvar $4mWlF = parcelRequire(\"4mWlF\");\n\nvar $dpRHA = parcelRequire(\"dpRHA\");\n\nvar $9DiKA = parcelRequire(\"9DiKA\");\n\nvar $5gNCk = parcelRequire(\"5gNCk\");\nconst $c9995bdfc864840b$var$view = new (0, $9DiKA.default)({\n    center: (0, $dpRHA.transform)([\n        -112.2,\n        36.06\n    ], 'EPSG:4326', 'EPSG:3857'),\n    zoom: 11\n});\nconst $c9995bdfc864840b$var$layer0 = new (0, $4mWlF.default)({\n    source: new (0, $9jDAx.default)()\n});\nconst $c9995bdfc864840b$var$key = 'pk.eyJ1IjoiZ2JvMiIsImEiOiJjazFraHV4N3gwZHliM2JucHYxdTNnNXh1In0.tzs3TxoVCaMNQf455mh-3w';\nconst $c9995bdfc864840b$var$tileJsonSource = new (0, $6hoO8.default)({\n    url: 'https://api.tiles.mapbox.com/v4/mapbox.world-borders-light.json?access_token=' + $c9995bdfc864840b$var$key,\n    crossOrigin: 'anonymous'\n});\nconst $c9995bdfc864840b$var$layer2 = new (0, $4mWlF.default)({\n    source: $c9995bdfc864840b$var$tileJsonSource\n});\nconst $c9995bdfc864840b$var$ol2d = new (0, $5DwXE.default)({\n    layers: [\n        $c9995bdfc864840b$var$layer0,\n        new (0, $YSU3I.default)({\n            layers: [\n                $c9995bdfc864840b$var$layer2\n            ]\n        })\n    ],\n    target: 'map2d',\n    view: $c9995bdfc864840b$var$view\n});\nconst $c9995bdfc864840b$var$ol3d = new (0, $cc3xD.default)({\n    map: $c9995bdfc864840b$var$ol2d,\n    target: 'mapCesium'\n});\n$c9995bdfc864840b$var$ol3d.getCesiumScene();\n$c9995bdfc864840b$var$ol3d.setEnabled(true);\nconst $c9995bdfc864840b$var$addStamen = function() {\n    $c9995bdfc864840b$var$ol2d.addLayer(new (0, $4mWlF.default)({\n        source: new (0, $d46497741df21850$export$2e2bcd8739ae039)({\n            opacity: 0.7,\n            layer: 'stamen_watercolor'\n        })\n    }));\n};\nconst $c9995bdfc864840b$var$tileWMSSource = new (0, $972nR.default)({\n    url: 'https://ahocevar.com/geoserver/wms',\n    params: {\n        'LAYERS': 'topp:states',\n        'TILED': true\n    },\n    serverType: 'geoserver',\n    crossOrigin: 'anonymous'\n});\nconst $c9995bdfc864840b$var$addTileWMS = function() {\n    $c9995bdfc864840b$var$ol2d.addLayer(new (0, $4mWlF.default)({\n        opacity: 0.5,\n        extent: [\n            -13884991,\n            2870341,\n            -7455066,\n            6338219\n        ],\n        source: $c9995bdfc864840b$var$tileWMSSource\n    }));\n};\nlet $c9995bdfc864840b$var$changeI = 0;\nconst $c9995bdfc864840b$var$changeTileWMSParams = function() {\n    $c9995bdfc864840b$var$tileWMSSource.updateParams({\n        'LAYERS': $c9995bdfc864840b$var$changeI++ % 2 == 0 ? 'nurc:Img_Sample' : 'topp:states'\n    });\n};\nconst $c9995bdfc864840b$var$addTileJSON = function() {\n    $c9995bdfc864840b$var$ol2d.addLayer(new (0, $4mWlF.default)({\n        source: $c9995bdfc864840b$var$tileJsonSource\n    }));\n};\nconst $c9995bdfc864840b$var$removeLastLayer = function() {\n    const length = $c9995bdfc864840b$var$ol2d.getLayers().getLength();\n    if (length > 0) $c9995bdfc864840b$var$ol2d.getLayers().removeAt(length - 1);\n};\nwindow['global'] = {\n    ol2d: $c9995bdfc864840b$var$ol2d,\n    removeLastLayer: $c9995bdfc864840b$var$removeLastLayer,\n    addStamen: $c9995bdfc864840b$var$addStamen,\n    addTileWMS: $c9995bdfc864840b$var$addTileWMS,\n    addTileJSON: $c9995bdfc864840b$var$addTileJSON,\n    changeTileWMSParams: $c9995bdfc864840b$var$changeTileWMSParams,\n    layer0: $c9995bdfc864840b$var$layer0,\n    layer2: $c9995bdfc864840b$var$layer2\n};\n(0, $5gNCk.initCodeSandbox)('rawjs/rastersync.js');\n\n\n//# sourceMappingURL=rastersync.6789028e.js.map\n","/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\n\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n    this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this),\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {Config} */ (JSON.parse(client.responseText));\n      } catch {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection,\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_,\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState('ready');\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n}\n\nexport default TileJSON;\n","/**\n * @module ol/net\n */\nimport {getUid} from './util.js';\n\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n  script.async = true;\n  script.src =\n    url +\n    (url.includes('?') ? '&' : '?') +\n    (callbackParam || 'callback') +\n    '=' +\n    key;\n  const timer = setTimeout(function () {\n    cleanup();\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n  document.head.appendChild(script);\n}\n\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ResponseError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.response = response;\n  }\n}\n\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ClientError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.client = client;\n  }\n}\n\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\n        let data;\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n  return new URL(url, base).href;\n}\n\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n  global.XMLHttpRequest = xhr;\n}\n\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}\n","import olSourceTileWMS from 'ol/source/TileWMS.js';\nimport StadiaMaps from 'ol/source/StadiaMaps.js';\nimport OLCesium from 'olcs';\nimport olLayerGroup from 'ol/layer/Group.js';\nimport olMap from 'ol/Map.js';\nimport olSourceTileJSON from 'ol/source/TileJSON.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport {transform} from 'ol/proj.js';\nimport olView from 'ol/View.js';\n\nconst view = new olView({\n  center: transform([-112.2, 36.06], 'EPSG:4326', 'EPSG:3857'),\n  zoom: 11\n});\n\nconst layer0 = new olLayerTile({\n  source: new olSourceOSM()\n});\n\nconst key = 'pk.eyJ1IjoiZ2JvMiIsImEiOiJjazFraHV4N3gwZHliM2JucHYxdTNnNXh1In0.tzs3TxoVCaMNQf455mh-3w';\nconst tileJsonSource = new olSourceTileJSON({\n  url: 'https://api.tiles.mapbox.com/v4/mapbox.world-borders-light.json?access_token=' + key,\n  crossOrigin: 'anonymous'\n});\n\nconst layer2 = new olLayerTile({\n  source: tileJsonSource\n});\nconst ol2d = new olMap({\n  layers: [layer0, new olLayerGroup({layers: [layer2]})],\n  target: 'map2d',\n  view,\n});\n\nconst ol3d = new OLCesium({map: ol2d, target: 'mapCesium'});\n\nol3d.getCesiumScene();\nol3d.setEnabled(true);\n\nconst addStamen = function() { // eslint-disable-line no-unused-vars\n  ol2d.addLayer(new olLayerTile({\n    source: new StadiaMaps({\n      opacity: 0.7,\n      layer: 'stamen_watercolor'\n    })\n  }));\n};\n\nconst tileWMSSource = new olSourceTileWMS({\n  url: 'https://ahocevar.com/geoserver/wms',\n  params: {'LAYERS': 'topp:states', 'TILED': true},\n  serverType: 'geoserver',\n  crossOrigin: 'anonymous'\n});\n\nconst addTileWMS = function() { // eslint-disable-line no-unused-vars\n  ol2d.addLayer(new olLayerTile({\n    opacity: 0.5,\n    extent: [-13884991, 2870341, -7455066, 6338219],\n    source: tileWMSSource\n  }));\n};\n\nlet changeI = 0;\nconst changeTileWMSParams = function() { // eslint-disable-line no-unused-vars\n  tileWMSSource.updateParams({\n    'LAYERS': (changeI++) % 2 == 0 ? 'nurc:Img_Sample' : 'topp:states'\n  });\n};\n\nconst addTileJSON = function() { // eslint-disable-line no-unused-vars\n  ol2d.addLayer(new olLayerTile({\n    source: tileJsonSource\n  }));\n};\n\nconst removeLastLayer = function() { // eslint-disable-line no-unused-vars\n  const length = ol2d.getLayers().getLength();\n  if (length > 0) {\n    ol2d.getLayers().removeAt(length - 1);\n  }\n};\n\nwindow['global'] = {\n  ol2d,\n  removeLastLayer,\n  addStamen,\n  addTileWMS,\n  addTileJSON,\n  changeTileWMSParams,\n  layer0,\n  layer2\n};\n\n//##REMOVE## Keep this tag, split code here for code sandbox\n\nimport {initCodeSandbox} from './_code-sandbox.js';\ninitCodeSandbox('rawjs/rastersync.js');\n","/**\n * @module ol/source/StadiaMaps\n */\n\nimport {ATTRIBUTION as OSM_ATTRIBUTION} from './OSM.js';\nimport XYZ from './XYZ.js';\n\n/**\n * @type {string}\n */\nconst STADIA_ATTRIBUTION =\n  '&copy; <a href=\"https://www.stadiamaps.com/\" target=\"_blank\">Stadia Maps</a>';\n\n/**\n * @type {string}\n */\nconst OMT_ATTRIBUTION =\n  '&copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a>';\n\n/**\n * @type {string}\n */\nconst STAMEN_ATTRIBUTION =\n  '&copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a>';\n\n/**\n * @type {Object<string, {extension: string}>}\n */\nconst LayerConfig = {\n  'stamen_terrain': {\n    extension: 'png',\n  },\n  'stamen_terrain_background': {\n    extension: 'png',\n  },\n  'stamen_terrain_labels': {\n    extension: 'png',\n  },\n  'stamen_terrain_lines': {\n    extension: 'png',\n  },\n  'stamen_toner_background': {\n    extension: 'png',\n  },\n  'stamen_toner': {\n    extension: 'png',\n  },\n  'stamen_toner_labels': {\n    extension: 'png',\n  },\n  'stamen_toner_lines': {\n    extension: 'png',\n  },\n  'stamen_toner_lite': {\n    extension: 'png',\n  },\n  'stamen_watercolor': {\n    extension: 'jpg',\n  },\n  'alidade_smooth': {\n    extension: 'png',\n  },\n  'alidade_smooth_dark': {\n    extension: 'png',\n  },\n  'alidade_satellite': {\n    extension: 'png',\n  },\n  'outdoors': {\n    extension: 'png',\n  },\n  'osm_bright': {\n    extension: 'png',\n  },\n};\n\n/**\n * @type {Object<string, {minZoom: number, maxZoom: number, retina: boolean}>}\n */\nconst ProviderConfig = {\n  'stamen_terrain': {\n    minZoom: 0,\n    maxZoom: 18,\n    retina: true,\n  },\n  'stamen_toner': {\n    minZoom: 0,\n    maxZoom: 20,\n    retina: true,\n  },\n  'stamen_watercolor': {\n    minZoom: 1,\n    maxZoom: 18,\n    retina: false,\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {string} layer Layer name. Valid values: `alidade_smooth`, `alidade_smooth_dark`, `outdoors`, `stamen_terrain`, `stamen_terrain_background`, `stamen_terrain_labels`, `stamen_terrain_lines`, `stamen_toner_background`, `stamen_toner`, `stamen_toner_labels`, `stamen_toner_lines`, `stamen_toner_lite`, `stamen_watercolor`, and `osm_bright`.\n * @property {number} [minZoom] Minimum zoom.\n * @property {number} [maxZoom] Maximum zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [apiKey] Stadia Maps API key. Not required for localhost or most public web deployments. See https://docs.stadiamaps.com/authentication/ for details.\n * @property {boolean} [retina] Use retina tiles (if available; not available for Stamen Watercolor).\n */\n\n/**\n * @classdesc\n * Layer source for the Stadia Maps tile server.\n * @api\n */\nclass StadiaMaps extends XYZ {\n  /**\n   * @param {Options} options StadiaMaps options.\n   */\n  constructor(options) {\n    const i = options.layer.indexOf('-');\n    const provider = i == -1 ? options.layer : options.layer.slice(0, i);\n    const providerConfig = ProviderConfig[provider] || {\n      'minZoom': 0,\n      'maxZoom': 20,\n      'retina': true,\n    };\n\n    const layerConfig = LayerConfig[options.layer];\n    const query = options.apiKey ? '?api_key=' + options.apiKey : '';\n    const retina = providerConfig.retina && options.retina ? '@2x' : '';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tiles.stadiamaps.com/tiles/' +\n          options.layer +\n          '/{z}/{x}/{y}' +\n          retina +\n          '.' +\n          layerConfig.extension +\n          query;\n\n    const attributions = [STADIA_ATTRIBUTION, OMT_ATTRIBUTION, OSM_ATTRIBUTION];\n\n    if (options.layer.startsWith('stamen_')) {\n      attributions.splice(1, 0, STAMEN_ATTRIBUTION);\n    }\n\n    super({\n      attributions: attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      maxZoom:\n        options.maxZoom !== undefined\n          ? options.maxZoom\n          : providerConfig.maxZoom,\n      minZoom:\n        options.minZoom !== undefined\n          ? options.minZoom\n          : providerConfig.minZoom,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      tilePixelRatio: retina ? 2 : 1,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default StadiaMaps;\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$492792e764651581$export$2e2bcd8739ae039","$9pD6L","$fVWcg","$dpRHA","$7vCDj","$cwqvp","$71uyY","$492792e764651581$var$TileJSON","default","constructor","options","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","wrapX","undefined","transition","zDirection","tileJSON_","tileSize_","tileSize","url","jsonp","handleTileJSONResponse","bind","handleTileJSONError","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","tileJSON","event","target","status","response","JSON","parse","responseText","getTileJSON","extent","epsg4326Projection","sourceProjection","getProjection","transform","getTransformFromProjections","applyTransform","gridExtent","extentFromProjection","minZoom","maxZoom","tileGrid","createXYZ","tileUrlFunction","createFromTemplates","getAttributions","attributionExtent","setAttributions","frameState","intersects","setState","$b9995293a67f37e1$export$3552a04808364507","$9iPUS","callback","errback","callbackParam","script","document","createElement","key","getUid","cleanup","window","parentNode","removeChild","async","src","includes","timer","setTimeout","data","clearTimeout","head","appendChild","$972nR","$9jDAx","$cTF5I","$d46497741df21850$var$LayerConfig","extension","$d46497741df21850$var$ProviderConfig","retina","$d46497741df21850$var$StadiaMaps","i","layer","indexOf","providerConfig","slice","layerConfig","query","apiKey","ATTRIBUTION","startsWith","splice","tilePixelRatio","$cc3xD","$YSU3I","$5DwXE","$6hoO8","$4mWlF","$9DiKA","$5gNCk","$c9995bdfc864840b$var$view","center","zoom","$c9995bdfc864840b$var$layer0","source","$c9995bdfc864840b$var$tileJsonSource","$c9995bdfc864840b$var$layer2","$c9995bdfc864840b$var$ol2d","layers","view","$c9995bdfc864840b$var$ol3d","map","getCesiumScene","setEnabled","$c9995bdfc864840b$var$tileWMSSource","params","serverType","$c9995bdfc864840b$var$changeI","ol2d","removeLastLayer","length","getLayers","getLength","removeAt","addStamen","addLayer","opacity","addTileWMS","addTileJSON","changeTileWMSParams","updateParams","layer0","layer2","initCodeSandbox"],"version":3,"file":"rastersync.6789028e.js.map"}